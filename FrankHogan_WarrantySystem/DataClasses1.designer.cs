#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrankHogan_WarrantySystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FrankHogan_Warranty")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCar(Car instance);
    partial void UpdateCar(Car instance);
    partial void DeleteCar(Car instance);
    partial void InsertClaim(Claim instance);
    partial void UpdateClaim(Claim instance);
    partial void DeleteClaim(Claim instance);
    partial void InsertClaimType(ClaimType instance);
    partial void UpdateClaimType(ClaimType instance);
    partial void DeleteClaimType(ClaimType instance);
    partial void InsertFault(Fault instance);
    partial void UpdateFault(Fault instance);
    partial void DeleteFault(Fault instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertLabourRate(LabourRate instance);
    partial void UpdateLabourRate(LabourRate instance);
    partial void DeleteLabourRate(LabourRate instance);
    partial void InsertMake(Make instance);
    partial void UpdateMake(Make instance);
    partial void DeleteMake(Make instance);
    partial void InsertRepair(Repair instance);
    partial void UpdateRepair(Repair instance);
    partial void DeleteRepair(Repair instance);
    partial void InsertSolution(Solution instance);
    partial void UpdateSolution(Solution instance);
    partial void DeleteSolution(Solution instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::FrankHogan_WarrantySystem.Properties.Settings.Default.FrankHogan_WarrantyConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Car> Cars
		{
			get
			{
				return this.GetTable<Car>();
			}
		}
		
		public System.Data.Linq.Table<Claim> Claims
		{
			get
			{
				return this.GetTable<Claim>();
			}
		}
		
		public System.Data.Linq.Table<ClaimType> ClaimTypes
		{
			get
			{
				return this.GetTable<ClaimType>();
			}
		}
		
		public System.Data.Linq.Table<Fault> Faults
		{
			get
			{
				return this.GetTable<Fault>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<LabourRate> LabourRates
		{
			get
			{
				return this.GetTable<LabourRate>();
			}
		}
		
		public System.Data.Linq.Table<Make> Makes
		{
			get
			{
				return this.GetTable<Make>();
			}
		}
		
		public System.Data.Linq.Table<Repair> Repairs
		{
			get
			{
				return this.GetTable<Repair>();
			}
		}
		
		public System.Data.Linq.Table<Solution> Solutions
		{
			get
			{
				return this.GetTable<Solution>();
			}
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp11FaultInsertion")]
		public int sp11FaultInsertion([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FaultText", DbType="VarChar(60)")] string faultText, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Group", DbType="Int")] System.Nullable<int> group)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), faultText, group);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp12RepairInsertion")]
		public int sp12RepairInsertion([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RepairOrder", DbType="Int")] System.Nullable<int> repairOrder, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VIN", DbType="Char(17)")] string vIN, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Fault", DbType="Int")] System.Nullable<int> fault, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Solution", DbType="Int")] System.Nullable<int> solution, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReceptionDate", DbType="Date")] System.Nullable<System.DateTime> receptionDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RepairDate", DbType="Date")] System.Nullable<System.DateTime> repairDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeTaken", DbType="Float")] System.Nullable<double> timeTaken, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Invoice", DbType="Int")] System.Nullable<int> invoice)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), repairOrder, vIN, fault, solution, receptionDate, repairDate, timeTaken, invoice);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp13ClaimInsertion")]
		public int sp13ClaimInsertion([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClaimNumber", DbType="Char(8)")] string claimNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="Char(4)")] string type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Repair", DbType="Int")] System.Nullable<int> repair, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date", DbType="Date")] System.Nullable<System.DateTime> date, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClaimValue", DbType="Money")] System.Nullable<decimal> claimValue, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeAllowed", DbType="Float")] System.Nullable<double> timeAllowed, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="Int")] System.Nullable<int> status, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PaymentDate", DbType="Date")] System.Nullable<System.DateTime> paymentDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ManufacturerCode", DbType="Char(3)")] string manufacturerCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment", DbType="VarChar(100)")] string comment)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), claimNumber, type, repair, date, claimValue, timeAllowed, status, paymentDate, manufacturerCode, comment);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp14UpdateStatus")]
		public int sp14UpdateStatus([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Claim", DbType="Int")] System.Nullable<int> claim, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="Int")] System.Nullable<int> status)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), claim, status);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp15UpdateClaimValue")]
		public int sp15UpdateClaimValue([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Claim", DbType="Int")] System.Nullable<int> claim, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Value", DbType="Int")] System.Nullable<int> value)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), claim, value);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp16UpdateTimeAllowed")]
		public int sp16UpdateTimeAllowed([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Claim", DbType="Int")] System.Nullable<int> claim, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Time", DbType="Int")] System.Nullable<int> time)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), claim, time);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp18SolutionInsertion")]
		public int sp18SolutionInsertion([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SolutionText", DbType="VarChar(60)")] string solutionText)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), solutionText);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp3CalculateWSPerformance")]
		public int sp3CalculateWSPerformance([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartDate", DbType="Date")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDate", DbType="Date")] System.Nullable<System.DateTime> endDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Make", DbType="Int")] System.Nullable<int> make, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="VarChar(4)")] string type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Performance", DbType="Float")] ref System.Nullable<double> performance)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate, make, type, performance);
			performance = ((System.Nullable<double>)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp7CarDetailsByVIN")]
		public ISingleResult<sp7CarDetailsByVINResult> sp7CarDetailsByVIN([global::System.Data.Linq.Mapping.ParameterAttribute(Name="VIN", DbType="Char(17)")] string vIN)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), vIN);
			return ((ISingleResult<sp7CarDetailsByVINResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp4ListOfClaimsByVIN")]
		public ISingleResult<sp4ListOfClaimsByVINResult> sp4ListOfClaimsByVIN([global::System.Data.Linq.Mapping.ParameterAttribute(Name="VIN", DbType="Char(17)")] string vIN)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), vIN);
			return ((ISingleResult<sp4ListOfClaimsByVINResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp15UpdateClaimValue")]
		public int sp15UpdateClaimValue1([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Claim", DbType="Int")] System.Nullable<int> claim, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Value", DbType="Money")] System.Nullable<decimal> value)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), claim, value);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp16UpdateTimeAllowed")]
		public int sp16UpdateTimeAllowed1([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Claim", DbType="Int")] System.Nullable<int> claim, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Time", DbType="Float")] System.Nullable<double> time)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), claim, time);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp11FaultInsertion")]
		public int sp11FaultInsertion1([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FaultText", DbType="VarChar(60)")] string faultText, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Group", DbType="Char(2)")] string group)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), faultText, group);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp12RepairInsertion")]
		public int sp12RepairInsertion1([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RepairOrder", DbType="Int")] System.Nullable<int> repairOrder, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VIN", DbType="Char(17)")] string vIN, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Fault", DbType="Int")] System.Nullable<int> fault, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Solution", DbType="Int")] System.Nullable<int> solution, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReceptionDate", DbType="Date")] System.Nullable<System.DateTime> receptionDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RepairDate", DbType="Date")] System.Nullable<System.DateTime> repairDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeTaken", DbType="Float")] System.Nullable<double> timeTaken, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Invoice", DbType="Int")] System.Nullable<int> invoice)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), repairOrder, vIN, fault, solution, receptionDate, repairDate, timeTaken, invoice);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp6GetInvoiceNumber")]
		public int sp6GetInvoiceNumber([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClaimNumber", DbType="VarChar(8)")] string claimNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VIN", DbType="Char(17)")] string vIN, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Invoice", DbType="Int")] ref System.Nullable<int> invoice)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), claimNumber, vIN, invoice);
			invoice = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp9ClaimDetails")]
		public ISingleResult<sp9ClaimDetailsResult> sp9ClaimDetails([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Claim", DbType="VarChar(8)")] string claim, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VIN", DbType="Char(17)")] string vIN)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), claim, vIN);
			return ((ISingleResult<sp9ClaimDetailsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp24UpdateRepair")]
		public int sp24UpdateRepair([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RepairID", DbType="Int")] System.Nullable<int> repairID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RepairOrder", DbType="Int")] System.Nullable<int> repairOrder, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VIN", DbType="Char(17)")] string vIN, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Fault", DbType="Int")] System.Nullable<int> fault, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Solution", DbType="Int")] System.Nullable<int> solution, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReceptionDate", DbType="Date")] System.Nullable<System.DateTime> receptionDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RepairDate", DbType="Date")] System.Nullable<System.DateTime> repairDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeTaken", DbType="Float")] System.Nullable<double> timeTaken, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Invoice", DbType="Int")] System.Nullable<int> invoice)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), repairID, repairOrder, vIN, fault, solution, receptionDate, repairDate, timeTaken, invoice);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp27DeleteClaim")]
		public int sp27DeleteClaim([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClaimNumber", DbType="VarChar(8)")] string claimNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VIN", DbType="Char(17)")] string vIN)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), claimNumber, vIN);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp5ListOfClaimsByReg")]
		public ISingleResult<sp5ListOfClaimsByRegResult> sp5ListOfClaimsByReg([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Reg", DbType="VarChar(12)")] string reg)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), reg);
			return ((ISingleResult<sp5ListOfClaimsByRegResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp8CarDetailsByReg")]
		public ISingleResult<sp8CarDetailsByRegResult> sp8CarDetailsByReg([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Reg", DbType="VarChar(12)")] string reg)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), reg);
			return ((ISingleResult<sp8CarDetailsByRegResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp10CarInsertion")]
		public int sp10CarInsertion([global::System.Data.Linq.Mapping.ParameterAttribute(Name="VIN", DbType="Char(17)")] string vIN, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Make", DbType="Int")] System.Nullable<int> make, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RegNumber", DbType="VarChar(12)")] string regNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Mileage", DbType="Int")] System.Nullable<int> mileage)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), vIN, make, regNumber, mileage);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp22UpdateRegNumber")]
		public int sp22UpdateRegNumber([global::System.Data.Linq.Mapping.ParameterAttribute(Name="VIN", DbType="Char(17)")] string vIN, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RegNumber", DbType="VarChar(12)")] string regNumber)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), vIN, regNumber);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp23UpdateCar")]
		public int sp23UpdateCar([global::System.Data.Linq.Mapping.ParameterAttribute(Name="VIN", DbType="Char(17)")] string vIN, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Make", DbType="Int")] System.Nullable<int> make, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RegNumber", DbType="VarChar(12)")] string regNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Mileage", DbType="Int")] System.Nullable<int> mileage)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), vIN, make, regNumber, mileage);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp25UpdateClaim")]
		public int sp25UpdateClaim([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClaimID", DbType="Int")] System.Nullable<int> claimID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClaimNumber", DbType="VarChar(8)")] string claimNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="Char(4)")] string type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Repair", DbType="Int")] System.Nullable<int> repair, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date", DbType="Date")] System.Nullable<System.DateTime> date, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClaimValue", DbType="Money")] System.Nullable<decimal> claimValue, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeAllowed", DbType="Float")] System.Nullable<double> timeAllowed, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="Int")] System.Nullable<int> status, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PaymentDate", DbType="Date")] System.Nullable<System.DateTime> paymentDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ManufacturerCode", DbType="Char(3)")] string manufacturerCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment", DbType="VarChar(100)")] string comment)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), claimID, claimNumber, type, repair, date, claimValue, timeAllowed, status, paymentDate, manufacturerCode, comment);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp26UpdateClaimTransaction")]
		public int sp26UpdateClaimTransaction(
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="VIN_Insert", DbType="Char(17)")] string vIN_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Mileage_Insert", DbType="Int")] System.Nullable<int> mileage_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Make_Insert", DbType="Int")] System.Nullable<int> make_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="RegNumber_Insert", DbType="VarChar(12)")] string regNumber_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="FaultID_Insert", DbType="Int")] System.Nullable<int> faultID_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="FaultDescription", DbType="VarChar(60)")] string faultDescription, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupID_Insert", DbType="Char(2)")] string groupID_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="SolutionID_Insert", DbType="Int")] System.Nullable<int> solutionID_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Solution_Insert", DbType="VarChar(60)")] string solution_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="RepairOrder_Insert", DbType="Int")] System.Nullable<int> repairOrder_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReceptionDate_Insert", DbType="Date")] System.Nullable<System.DateTime> receptionDate_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="RepairDate_Insert", DbType="Date")] System.Nullable<System.DateTime> repairDate_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeTaken_Insert", DbType="Float")] System.Nullable<double> timeTaken_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Invoice_Insert", DbType="Int")] System.Nullable<int> invoice_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClaimNumber_Insert", DbType="VarChar(8)")] string claimNumber_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type_Insert", DbType="Char(4)")] string type_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClaimDate", DbType="Date")] System.Nullable<System.DateTime> claimDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClaimValue_Insert", DbType="Money")] System.Nullable<decimal> claimValue_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeAllowed_Insert", DbType="Float")] System.Nullable<double> timeAllowed_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status_Insert", DbType="Int")] System.Nullable<int> status_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="PaymentDate_Insert", DbType="Date")] System.Nullable<System.DateTime> paymentDate_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ManuCode_Insert", DbType="Char(3)")] string manuCode_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment_Insert", DbType="VarChar(100)")] string comment_Insert)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), vIN_Insert, mileage_Insert, make_Insert, regNumber_Insert, faultID_Insert, faultDescription, groupID_Insert, solutionID_Insert, solution_Insert, repairOrder_Insert, receptionDate_Insert, repairDate_Insert, timeTaken_Insert, invoice_Insert, claimNumber_Insert, type_Insert, claimDate, claimValue_Insert, timeAllowed_Insert, status_Insert, paymentDate_Insert, manuCode_Insert, comment_Insert);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp20FilterClaims")]
		public ISingleResult<sp20FilterClaimsResult> sp20FilterClaims([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartDate", DbType="Date")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDate", DbType="Date")] System.Nullable<System.DateTime> endDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="Int")] System.Nullable<int> status, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Make", DbType="Int")] System.Nullable<int> make, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="VarChar(4)")] string type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Group", DbType="VarChar(2)")] string group, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MinValue", DbType="Money")] System.Nullable<decimal> minValue, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxValue", DbType="Money")] System.Nullable<decimal> maxValue, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Fault", DbType="VarChar(60)")] string fault)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate, status, make, type, group, minValue, maxValue, fault);
			return ((ISingleResult<sp20FilterClaimsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp19InsertClaimTransaction")]
		public int sp19InsertClaimTransaction(
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="VIN_Insert", DbType="Char(17)")] string vIN_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Mileage_Insert", DbType="Int")] System.Nullable<int> mileage_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Make_Insert", DbType="Int")] System.Nullable<int> make_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="RegNumber_Insert", DbType="VarChar(12)")] string regNumber_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="FaultID_Insert", DbType="Int")] System.Nullable<int> faultID_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="FaultDescription", DbType="VarChar(60)")] string faultDescription, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupID_Insert", DbType="Char(2)")] string groupID_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="SolutionID_Insert", DbType="Int")] System.Nullable<int> solutionID_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Solution_Insert", DbType="VarChar(60)")] string solution_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="RepairOrder_Insert", DbType="Int")] System.Nullable<int> repairOrder_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReceptionDate_Insert", DbType="Date")] System.Nullable<System.DateTime> receptionDate_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="RepairDate_Insert", DbType="Date")] System.Nullable<System.DateTime> repairDate_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeTaken_Insert", DbType="Float")] System.Nullable<double> timeTaken_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Invoice_Insert", DbType="Int")] System.Nullable<int> invoice_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClaimNumber_Insert", DbType="VarChar(8)")] string claimNumber_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type_Insert", DbType="Char(4)")] string type_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClaimDate", DbType="Date")] System.Nullable<System.DateTime> claimDate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClaimValue_Insert", DbType="Money")] System.Nullable<decimal> claimValue_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeAllowed_Insert", DbType="Float")] System.Nullable<double> timeAllowed_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status_Insert", DbType="Int")] System.Nullable<int> status_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="PaymentDate_Insert", DbType="Date")] System.Nullable<System.DateTime> paymentDate_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ManuCode_Insert", DbType="Char(3)")] string manuCode_Insert, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment_Insert", DbType="VarChar(100)")] string comment_Insert)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), vIN_Insert, mileage_Insert, make_Insert, regNumber_Insert, faultID_Insert, faultDescription, groupID_Insert, solutionID_Insert, solution_Insert, repairOrder_Insert, receptionDate_Insert, repairDate_Insert, timeTaken_Insert, invoice_Insert, claimNumber_Insert, type_Insert, claimDate, claimValue_Insert, timeAllowed_Insert, status_Insert, paymentDate_Insert, manuCode_Insert, comment_Insert);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp17UpdateMileage")]
		public int sp17UpdateMileage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="VIN", DbType="Char(17)")] string vIN, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Mileage", DbType="Int")] System.Nullable<int> mileage)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), vIN, mileage);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp2CalculateClaimingSpeed")]
		public int sp2CalculateClaimingSpeed([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartDate", DbType="Date")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDate", DbType="Date")] System.Nullable<System.DateTime> endDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Make", DbType="Int")] System.Nullable<int> make, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SpeedKPI", DbType="Float")] ref System.Nullable<double> speedKPI)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate, make, speedKPI);
			speedKPI = ((System.Nullable<double>)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp1CountClaims")]
		public int sp1CountClaims([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartDate", DbType="Date")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDate", DbType="Date")] System.Nullable<System.DateTime> endDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="Int")] System.Nullable<int> status, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Make", DbType="Int")] System.Nullable<int> make, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="VarChar(4)")] string type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Group", DbType="VarChar(2)")] string group, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MinValue", DbType="Money")] System.Nullable<decimal> minValue, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxValue", DbType="Money")] System.Nullable<decimal> maxValue, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Fault", DbType="VarChar(60)")] string fault, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NumberOfClaims", DbType="Int")] ref System.Nullable<int> numberOfClaims, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClaimedValue", DbType="Money")] ref System.Nullable<decimal> claimedValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate, status, make, type, group, minValue, maxValue, fault, numberOfClaims, claimedValue);
			numberOfClaims = ((System.Nullable<int>)(result.GetParameterValue(9)));
			claimedValue = ((System.Nullable<decimal>)(result.GetParameterValue(10)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp21LabourClaimed")]
		public int sp21LabourClaimed([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartDate", DbType="Date")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDate", DbType="Date")] System.Nullable<System.DateTime> endDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="Int")] System.Nullable<int> status, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Make", DbType="Int")] System.Nullable<int> make, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type", DbType="VarChar(4)")] string type, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Group", DbType="VarChar(2)")] string group, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MinValue", DbType="Money")] System.Nullable<decimal> minValue, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxValue", DbType="Money")] System.Nullable<decimal> maxValue, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Fault", DbType="VarChar(60)")] string fault, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LabourClaimed", DbType="Money")] ref System.Nullable<decimal> labourClaimed)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate, status, make, type, group, minValue, maxValue, fault, labourClaimed);
			labourClaimed = ((System.Nullable<decimal>)(result.GetParameterValue(9)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VIN;
		
		private int _Make_ID;
		
		private string _RegNumber;
		
		private int _Mileage;
		
		private EntitySet<Repair> _Repairs;
		
		private EntityRef<Make> _Make;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVINChanging(string value);
    partial void OnVINChanged();
    partial void OnMake_IDChanging(int value);
    partial void OnMake_IDChanged();
    partial void OnRegNumberChanging(string value);
    partial void OnRegNumberChanged();
    partial void OnMileageChanging(int value);
    partial void OnMileageChanged();
    #endregion
		
		public Car()
		{
			this._Repairs = new EntitySet<Repair>(new Action<Repair>(this.attach_Repairs), new Action<Repair>(this.detach_Repairs));
			this._Make = default(EntityRef<Make>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIN", DbType="Char(17) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VIN
		{
			get
			{
				return this._VIN;
			}
			set
			{
				if ((this._VIN != value))
				{
					this.OnVINChanging(value);
					this.SendPropertyChanging();
					this._VIN = value;
					this.SendPropertyChanged("VIN");
					this.OnVINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Make_ID", DbType="Int NOT NULL")]
		public int Make_ID
		{
			get
			{
				return this._Make_ID;
			}
			set
			{
				if ((this._Make_ID != value))
				{
					if (this._Make.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMake_IDChanging(value);
					this.SendPropertyChanging();
					this._Make_ID = value;
					this.SendPropertyChanged("Make_ID");
					this.OnMake_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegNumber", DbType="VarChar(10)")]
		public string RegNumber
		{
			get
			{
				return this._RegNumber;
			}
			set
			{
				if ((this._RegNumber != value))
				{
					this.OnRegNumberChanging(value);
					this.SendPropertyChanging();
					this._RegNumber = value;
					this.SendPropertyChanged("RegNumber");
					this.OnRegNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mileage", DbType="Int NOT NULL")]
		public int Mileage
		{
			get
			{
				return this._Mileage;
			}
			set
			{
				if ((this._Mileage != value))
				{
					this.OnMileageChanging(value);
					this.SendPropertyChanging();
					this._Mileage = value;
					this.SendPropertyChanged("Mileage");
					this.OnMileageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_Repair", Storage="_Repairs", ThisKey="VIN", OtherKey="VIN")]
		public EntitySet<Repair> Repairs
		{
			get
			{
				return this._Repairs;
			}
			set
			{
				this._Repairs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Make_Car", Storage="_Make", ThisKey="Make_ID", OtherKey="Make_ID", IsForeignKey=true)]
		public Make Make
		{
			get
			{
				return this._Make.Entity;
			}
			set
			{
				Make previousValue = this._Make.Entity;
				if (((previousValue != value) 
							|| (this._Make.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Make.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._Make.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._Make_ID = value.Make_ID;
					}
					else
					{
						this._Make_ID = default(int);
					}
					this.SendPropertyChanged("Make");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Repairs(Repair entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_Repairs(Repair entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Claims")]
	public partial class Claim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Claim_ID;
		
		private string _ClaimNumber;
		
		private string _ClaimType_ID;
		
		private System.Nullable<int> _Repair_ID;
		
		private System.Nullable<System.DateTime> _ClaimDate;
		
		private System.Nullable<double> _TimeAllowed;
		
		private decimal _ClaimValue;
		
		private System.Nullable<int> _Status_ID;
		
		private System.Nullable<System.DateTime> _PaymentDate;
		
		private string _ManuCode;
		
		private string _Comments;
		
		private EntityRef<ClaimType> _ClaimType;
		
		private EntityRef<Repair> _Repair;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClaim_IDChanging(int value);
    partial void OnClaim_IDChanged();
    partial void OnClaimNumberChanging(string value);
    partial void OnClaimNumberChanged();
    partial void OnClaimType_IDChanging(string value);
    partial void OnClaimType_IDChanged();
    partial void OnRepair_IDChanging(System.Nullable<int> value);
    partial void OnRepair_IDChanged();
    partial void OnClaimDateChanging(System.Nullable<System.DateTime> value);
    partial void OnClaimDateChanged();
    partial void OnTimeAllowedChanging(System.Nullable<double> value);
    partial void OnTimeAllowedChanged();
    partial void OnClaimValueChanging(decimal value);
    partial void OnClaimValueChanged();
    partial void OnStatus_IDChanging(System.Nullable<int> value);
    partial void OnStatus_IDChanged();
    partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentDateChanged();
    partial void OnManuCodeChanging(string value);
    partial void OnManuCodeChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public Claim()
		{
			this._ClaimType = default(EntityRef<ClaimType>);
			this._Repair = default(EntityRef<Repair>);
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Claim_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Claim_ID
		{
			get
			{
				return this._Claim_ID;
			}
			set
			{
				if ((this._Claim_ID != value))
				{
					this.OnClaim_IDChanging(value);
					this.SendPropertyChanging();
					this._Claim_ID = value;
					this.SendPropertyChanged("Claim_ID");
					this.OnClaim_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimNumber", DbType="Char(8)")]
		public string ClaimNumber
		{
			get
			{
				return this._ClaimNumber;
			}
			set
			{
				if ((this._ClaimNumber != value))
				{
					this.OnClaimNumberChanging(value);
					this.SendPropertyChanging();
					this._ClaimNumber = value;
					this.SendPropertyChanged("ClaimNumber");
					this.OnClaimNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType_ID", DbType="Char(4)")]
		public string ClaimType_ID
		{
			get
			{
				return this._ClaimType_ID;
			}
			set
			{
				if ((this._ClaimType_ID != value))
				{
					if (this._ClaimType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClaimType_IDChanging(value);
					this.SendPropertyChanging();
					this._ClaimType_ID = value;
					this.SendPropertyChanged("ClaimType_ID");
					this.OnClaimType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Repair_ID", DbType="Int")]
		public System.Nullable<int> Repair_ID
		{
			get
			{
				return this._Repair_ID;
			}
			set
			{
				if ((this._Repair_ID != value))
				{
					if (this._Repair.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepair_IDChanging(value);
					this.SendPropertyChanging();
					this._Repair_ID = value;
					this.SendPropertyChanged("Repair_ID");
					this.OnRepair_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimDate", DbType="Date")]
		public System.Nullable<System.DateTime> ClaimDate
		{
			get
			{
				return this._ClaimDate;
			}
			set
			{
				if ((this._ClaimDate != value))
				{
					this.OnClaimDateChanging(value);
					this.SendPropertyChanging();
					this._ClaimDate = value;
					this.SendPropertyChanged("ClaimDate");
					this.OnClaimDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeAllowed", DbType="Float")]
		public System.Nullable<double> TimeAllowed
		{
			get
			{
				return this._TimeAllowed;
			}
			set
			{
				if ((this._TimeAllowed != value))
				{
					this.OnTimeAllowedChanging(value);
					this.SendPropertyChanging();
					this._TimeAllowed = value;
					this.SendPropertyChanged("TimeAllowed");
					this.OnTimeAllowedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimValue", DbType="Money NOT NULL")]
		public decimal ClaimValue
		{
			get
			{
				return this._ClaimValue;
			}
			set
			{
				if ((this._ClaimValue != value))
				{
					this.OnClaimValueChanging(value);
					this.SendPropertyChanging();
					this._ClaimValue = value;
					this.SendPropertyChanged("ClaimValue");
					this.OnClaimValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status_ID", DbType="Int")]
		public System.Nullable<int> Status_ID
		{
			get
			{
				return this._Status_ID;
			}
			set
			{
				if ((this._Status_ID != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._Status_ID = value;
					this.SendPropertyChanged("Status_ID");
					this.OnStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="Date")]
		public System.Nullable<System.DateTime> PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManuCode", DbType="Char(3)")]
		public string ManuCode
		{
			get
			{
				return this._ManuCode;
			}
			set
			{
				if ((this._ManuCode != value))
				{
					this.OnManuCodeChanging(value);
					this.SendPropertyChanging();
					this._ManuCode = value;
					this.SendPropertyChanged("ManuCode");
					this.OnManuCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(100)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClaimType_Claim", Storage="_ClaimType", ThisKey="ClaimType_ID", OtherKey="ClaimType_ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public ClaimType ClaimType
		{
			get
			{
				return this._ClaimType.Entity;
			}
			set
			{
				ClaimType previousValue = this._ClaimType.Entity;
				if (((previousValue != value) 
							|| (this._ClaimType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClaimType.Entity = null;
						previousValue.Claims.Remove(this);
					}
					this._ClaimType.Entity = value;
					if ((value != null))
					{
						value.Claims.Add(this);
						this._ClaimType_ID = value.ClaimType_ID;
					}
					else
					{
						this._ClaimType_ID = default(string);
					}
					this.SendPropertyChanged("ClaimType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Repair_Claim", Storage="_Repair", ThisKey="Repair_ID", OtherKey="Repair_ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Repair Repair
		{
			get
			{
				return this._Repair.Entity;
			}
			set
			{
				Repair previousValue = this._Repair.Entity;
				if (((previousValue != value) 
							|| (this._Repair.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Repair.Entity = null;
						previousValue.Claims.Remove(this);
					}
					this._Repair.Entity = value;
					if ((value != null))
					{
						value.Claims.Add(this);
						this._Repair_ID = value.Repair_ID;
					}
					else
					{
						this._Repair_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Repair");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Claim", Storage="_Status", ThisKey="Status_ID", OtherKey="Status_ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.Claims.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.Claims.Add(this);
						this._Status_ID = value.Status_ID;
					}
					else
					{
						this._Status_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClaimTypes")]
	public partial class ClaimType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClaimType_ID;
		
		private string _TypeDescription;
		
		private EntitySet<Claim> _Claims;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClaimType_IDChanging(string value);
    partial void OnClaimType_IDChanged();
    partial void OnTypeDescriptionChanging(string value);
    partial void OnTypeDescriptionChanged();
    #endregion
		
		public ClaimType()
		{
			this._Claims = new EntitySet<Claim>(new Action<Claim>(this.attach_Claims), new Action<Claim>(this.detach_Claims));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType_ID", DbType="Char(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClaimType_ID
		{
			get
			{
				return this._ClaimType_ID;
			}
			set
			{
				if ((this._ClaimType_ID != value))
				{
					this.OnClaimType_IDChanging(value);
					this.SendPropertyChanging();
					this._ClaimType_ID = value;
					this.SendPropertyChanged("ClaimType_ID");
					this.OnClaimType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeDescription", DbType="VarChar(70) NOT NULL", CanBeNull=false)]
		public string TypeDescription
		{
			get
			{
				return this._TypeDescription;
			}
			set
			{
				if ((this._TypeDescription != value))
				{
					this.OnTypeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TypeDescription = value;
					this.SendPropertyChanged("TypeDescription");
					this.OnTypeDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClaimType_Claim", Storage="_Claims", ThisKey="ClaimType_ID", OtherKey="ClaimType_ID")]
		public EntitySet<Claim> Claims
		{
			get
			{
				return this._Claims;
			}
			set
			{
				this._Claims.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Claims(Claim entity)
		{
			this.SendPropertyChanging();
			entity.ClaimType = this;
		}
		
		private void detach_Claims(Claim entity)
		{
			this.SendPropertyChanging();
			entity.ClaimType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Faults")]
	public partial class Fault : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Fault_ID;
		
		private string _Fault1;
		
		private string _Group_ID;
		
		private EntitySet<Repair> _Repairs;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFault_IDChanging(int value);
    partial void OnFault_IDChanged();
    partial void OnFault1Changing(string value);
    partial void OnFault1Changed();
    partial void OnGroup_IDChanging(string value);
    partial void OnGroup_IDChanged();
    #endregion
		
		public Fault()
		{
			this._Repairs = new EntitySet<Repair>(new Action<Repair>(this.attach_Repairs), new Action<Repair>(this.detach_Repairs));
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fault_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Fault_ID
		{
			get
			{
				return this._Fault_ID;
			}
			set
			{
				if ((this._Fault_ID != value))
				{
					this.OnFault_IDChanging(value);
					this.SendPropertyChanging();
					this._Fault_ID = value;
					this.SendPropertyChanged("Fault_ID");
					this.OnFault_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Fault", Storage="_Fault1", DbType="VarChar(60)")]
		public string Fault1
		{
			get
			{
				return this._Fault1;
			}
			set
			{
				if ((this._Fault1 != value))
				{
					this.OnFault1Changing(value);
					this.SendPropertyChanging();
					this._Fault1 = value;
					this.SendPropertyChanged("Fault1");
					this.OnFault1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Group_ID", DbType="Char(2)")]
		public string Group_ID
		{
			get
			{
				return this._Group_ID;
			}
			set
			{
				if ((this._Group_ID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroup_IDChanging(value);
					this.SendPropertyChanging();
					this._Group_ID = value;
					this.SendPropertyChanged("Group_ID");
					this.OnGroup_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fault_Repair", Storage="_Repairs", ThisKey="Fault_ID", OtherKey="Fault_ID")]
		public EntitySet<Repair> Repairs
		{
			get
			{
				return this._Repairs;
			}
			set
			{
				this._Repairs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Fault", Storage="_Group", ThisKey="Group_ID", OtherKey="Group_ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Faults.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Faults.Add(this);
						this._Group_ID = value.Group_ID;
					}
					else
					{
						this._Group_ID = default(string);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Repairs(Repair entity)
		{
			this.SendPropertyChanging();
			entity.Fault = this;
		}
		
		private void detach_Repairs(Repair entity)
		{
			this.SendPropertyChanging();
			entity.Fault = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Group_ID;
		
		private string _GroupDescription;
		
		private EntitySet<Fault> _Faults;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroup_IDChanging(string value);
    partial void OnGroup_IDChanged();
    partial void OnGroupDescriptionChanging(string value);
    partial void OnGroupDescriptionChanged();
    #endregion
		
		public Group()
		{
			this._Faults = new EntitySet<Fault>(new Action<Fault>(this.attach_Faults), new Action<Fault>(this.detach_Faults));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Group_ID", DbType="Char(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Group_ID
		{
			get
			{
				return this._Group_ID;
			}
			set
			{
				if ((this._Group_ID != value))
				{
					this.OnGroup_IDChanging(value);
					this.SendPropertyChanging();
					this._Group_ID = value;
					this.SendPropertyChanged("Group_ID");
					this.OnGroup_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupDescription", DbType="VarChar(60)")]
		public string GroupDescription
		{
			get
			{
				return this._GroupDescription;
			}
			set
			{
				if ((this._GroupDescription != value))
				{
					this.OnGroupDescriptionChanging(value);
					this.SendPropertyChanging();
					this._GroupDescription = value;
					this.SendPropertyChanged("GroupDescription");
					this.OnGroupDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Fault", Storage="_Faults", ThisKey="Group_ID", OtherKey="Group_ID")]
		public EntitySet<Fault> Faults
		{
			get
			{
				return this._Faults;
			}
			set
			{
				this._Faults.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Faults(Fault entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Faults(Fault entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabourRates")]
	public partial class LabourRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LabourRate_ID;
		
		private System.Nullable<double> _Rate;
		
		private string _Description;
		
		private EntitySet<Make> _Makes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLabourRate_IDChanging(int value);
    partial void OnLabourRate_IDChanged();
    partial void OnRateChanging(System.Nullable<double> value);
    partial void OnRateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public LabourRate()
		{
			this._Makes = new EntitySet<Make>(new Action<Make>(this.attach_Makes), new Action<Make>(this.detach_Makes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabourRate_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LabourRate_ID
		{
			get
			{
				return this._LabourRate_ID;
			}
			set
			{
				if ((this._LabourRate_ID != value))
				{
					this.OnLabourRate_IDChanging(value);
					this.SendPropertyChanging();
					this._LabourRate_ID = value;
					this.SendPropertyChanged("LabourRate_ID");
					this.OnLabourRate_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Float")]
		public System.Nullable<double> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(30)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabourRate_Make", Storage="_Makes", ThisKey="LabourRate_ID", OtherKey="WAR_LRate_ID")]
		public EntitySet<Make> Makes
		{
			get
			{
				return this._Makes;
			}
			set
			{
				this._Makes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Makes(Make entity)
		{
			this.SendPropertyChanging();
			entity.LabourRate = this;
		}
		
		private void detach_Makes(Make entity)
		{
			this.SendPropertyChanging();
			entity.LabourRate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Makes")]
	public partial class Make : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Make_ID;
		
		private string _Name;
		
		private int _WAR_LRate_ID;
		
		private double _SER_LRate;
		
		private EntitySet<Car> _Cars;
		
		private EntityRef<LabourRate> _LabourRate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMake_IDChanging(int value);
    partial void OnMake_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnWAR_LRate_IDChanging(int value);
    partial void OnWAR_LRate_IDChanged();
    partial void OnSER_LRateChanging(double value);
    partial void OnSER_LRateChanged();
    #endregion
		
		public Make()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			this._LabourRate = default(EntityRef<LabourRate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Make_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Make_ID
		{
			get
			{
				return this._Make_ID;
			}
			set
			{
				if ((this._Make_ID != value))
				{
					this.OnMake_IDChanging(value);
					this.SendPropertyChanging();
					this._Make_ID = value;
					this.SendPropertyChanged("Make_ID");
					this.OnMake_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WAR_LRate_ID", DbType="Int NOT NULL")]
		public int WAR_LRate_ID
		{
			get
			{
				return this._WAR_LRate_ID;
			}
			set
			{
				if ((this._WAR_LRate_ID != value))
				{
					if (this._LabourRate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWAR_LRate_IDChanging(value);
					this.SendPropertyChanging();
					this._WAR_LRate_ID = value;
					this.SendPropertyChanged("WAR_LRate_ID");
					this.OnWAR_LRate_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SER_LRate", DbType="Float NOT NULL")]
		public double SER_LRate
		{
			get
			{
				return this._SER_LRate;
			}
			set
			{
				if ((this._SER_LRate != value))
				{
					this.OnSER_LRateChanging(value);
					this.SendPropertyChanging();
					this._SER_LRate = value;
					this.SendPropertyChanged("SER_LRate");
					this.OnSER_LRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Make_Car", Storage="_Cars", ThisKey="Make_ID", OtherKey="Make_ID")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabourRate_Make", Storage="_LabourRate", ThisKey="WAR_LRate_ID", OtherKey="LabourRate_ID", IsForeignKey=true)]
		public LabourRate LabourRate
		{
			get
			{
				return this._LabourRate.Entity;
			}
			set
			{
				LabourRate previousValue = this._LabourRate.Entity;
				if (((previousValue != value) 
							|| (this._LabourRate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabourRate.Entity = null;
						previousValue.Makes.Remove(this);
					}
					this._LabourRate.Entity = value;
					if ((value != null))
					{
						value.Makes.Add(this);
						this._WAR_LRate_ID = value.LabourRate_ID;
					}
					else
					{
						this._WAR_LRate_ID = default(int);
					}
					this.SendPropertyChanged("LabourRate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Make = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Make = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Repairs")]
	public partial class Repair : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Repair_ID;
		
		private System.Nullable<int> _RepairOrder;
		
		private string _VIN;
		
		private int _Fault_ID;
		
		private System.Nullable<int> _Solution_ID;
		
		private System.Nullable<System.DateTime> _ReceptionDate;
		
		private System.DateTime _RepairDate;
		
		private double _TimeTaken;
		
		private System.Nullable<int> _InvoiceNumber;
		
		private EntitySet<Claim> _Claims;
		
		private EntityRef<Fault> _Fault;
		
		private EntityRef<Car> _Car;
		
		private EntityRef<Solution> _Solution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRepair_IDChanging(int value);
    partial void OnRepair_IDChanged();
    partial void OnRepairOrderChanging(System.Nullable<int> value);
    partial void OnRepairOrderChanged();
    partial void OnVINChanging(string value);
    partial void OnVINChanged();
    partial void OnFault_IDChanging(int value);
    partial void OnFault_IDChanged();
    partial void OnSolution_IDChanging(System.Nullable<int> value);
    partial void OnSolution_IDChanged();
    partial void OnReceptionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReceptionDateChanged();
    partial void OnRepairDateChanging(System.DateTime value);
    partial void OnRepairDateChanged();
    partial void OnTimeTakenChanging(double value);
    partial void OnTimeTakenChanged();
    partial void OnInvoiceNumberChanging(System.Nullable<int> value);
    partial void OnInvoiceNumberChanged();
    #endregion
		
		public Repair()
		{
			this._Claims = new EntitySet<Claim>(new Action<Claim>(this.attach_Claims), new Action<Claim>(this.detach_Claims));
			this._Fault = default(EntityRef<Fault>);
			this._Car = default(EntityRef<Car>);
			this._Solution = default(EntityRef<Solution>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Repair_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Repair_ID
		{
			get
			{
				return this._Repair_ID;
			}
			set
			{
				if ((this._Repair_ID != value))
				{
					this.OnRepair_IDChanging(value);
					this.SendPropertyChanging();
					this._Repair_ID = value;
					this.SendPropertyChanged("Repair_ID");
					this.OnRepair_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepairOrder", DbType="Int")]
		public System.Nullable<int> RepairOrder
		{
			get
			{
				return this._RepairOrder;
			}
			set
			{
				if ((this._RepairOrder != value))
				{
					this.OnRepairOrderChanging(value);
					this.SendPropertyChanging();
					this._RepairOrder = value;
					this.SendPropertyChanged("RepairOrder");
					this.OnRepairOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIN", DbType="Char(17) NOT NULL", CanBeNull=false)]
		public string VIN
		{
			get
			{
				return this._VIN;
			}
			set
			{
				if ((this._VIN != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVINChanging(value);
					this.SendPropertyChanging();
					this._VIN = value;
					this.SendPropertyChanged("VIN");
					this.OnVINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fault_ID", DbType="Int NOT NULL")]
		public int Fault_ID
		{
			get
			{
				return this._Fault_ID;
			}
			set
			{
				if ((this._Fault_ID != value))
				{
					if (this._Fault.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFault_IDChanging(value);
					this.SendPropertyChanging();
					this._Fault_ID = value;
					this.SendPropertyChanged("Fault_ID");
					this.OnFault_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solution_ID", DbType="Int")]
		public System.Nullable<int> Solution_ID
		{
			get
			{
				return this._Solution_ID;
			}
			set
			{
				if ((this._Solution_ID != value))
				{
					if (this._Solution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSolution_IDChanging(value);
					this.SendPropertyChanging();
					this._Solution_ID = value;
					this.SendPropertyChanged("Solution_ID");
					this.OnSolution_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptionDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReceptionDate
		{
			get
			{
				return this._ReceptionDate;
			}
			set
			{
				if ((this._ReceptionDate != value))
				{
					this.OnReceptionDateChanging(value);
					this.SendPropertyChanging();
					this._ReceptionDate = value;
					this.SendPropertyChanged("ReceptionDate");
					this.OnReceptionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepairDate", DbType="Date NOT NULL")]
		public System.DateTime RepairDate
		{
			get
			{
				return this._RepairDate;
			}
			set
			{
				if ((this._RepairDate != value))
				{
					this.OnRepairDateChanging(value);
					this.SendPropertyChanging();
					this._RepairDate = value;
					this.SendPropertyChanged("RepairDate");
					this.OnRepairDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeTaken", DbType="Float NOT NULL")]
		public double TimeTaken
		{
			get
			{
				return this._TimeTaken;
			}
			set
			{
				if ((this._TimeTaken != value))
				{
					this.OnTimeTakenChanging(value);
					this.SendPropertyChanging();
					this._TimeTaken = value;
					this.SendPropertyChanged("TimeTaken");
					this.OnTimeTakenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNumber", DbType="Int")]
		public System.Nullable<int> InvoiceNumber
		{
			get
			{
				return this._InvoiceNumber;
			}
			set
			{
				if ((this._InvoiceNumber != value))
				{
					this.OnInvoiceNumberChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNumber = value;
					this.SendPropertyChanged("InvoiceNumber");
					this.OnInvoiceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Repair_Claim", Storage="_Claims", ThisKey="Repair_ID", OtherKey="Repair_ID")]
		public EntitySet<Claim> Claims
		{
			get
			{
				return this._Claims;
			}
			set
			{
				this._Claims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fault_Repair", Storage="_Fault", ThisKey="Fault_ID", OtherKey="Fault_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Fault Fault
		{
			get
			{
				return this._Fault.Entity;
			}
			set
			{
				Fault previousValue = this._Fault.Entity;
				if (((previousValue != value) 
							|| (this._Fault.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fault.Entity = null;
						previousValue.Repairs.Remove(this);
					}
					this._Fault.Entity = value;
					if ((value != null))
					{
						value.Repairs.Add(this);
						this._Fault_ID = value.Fault_ID;
					}
					else
					{
						this._Fault_ID = default(int);
					}
					this.SendPropertyChanged("Fault");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_Repair", Storage="_Car", ThisKey="VIN", OtherKey="VIN", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.Repairs.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.Repairs.Add(this);
						this._VIN = value.VIN;
					}
					else
					{
						this._VIN = default(string);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Solution_Repair", Storage="_Solution", ThisKey="Solution_ID", OtherKey="Solution_ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Solution Solution
		{
			get
			{
				return this._Solution.Entity;
			}
			set
			{
				Solution previousValue = this._Solution.Entity;
				if (((previousValue != value) 
							|| (this._Solution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Solution.Entity = null;
						previousValue.Repairs.Remove(this);
					}
					this._Solution.Entity = value;
					if ((value != null))
					{
						value.Repairs.Add(this);
						this._Solution_ID = value.Solution_ID;
					}
					else
					{
						this._Solution_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Solution");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Claims(Claim entity)
		{
			this.SendPropertyChanging();
			entity.Repair = this;
		}
		
		private void detach_Claims(Claim entity)
		{
			this.SendPropertyChanging();
			entity.Repair = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Solutions")]
	public partial class Solution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Solution_ID;
		
		private string _Solution1;
		
		private EntitySet<Repair> _Repairs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSolution_IDChanging(int value);
    partial void OnSolution_IDChanged();
    partial void OnSolution1Changing(string value);
    partial void OnSolution1Changed();
    #endregion
		
		public Solution()
		{
			this._Repairs = new EntitySet<Repair>(new Action<Repair>(this.attach_Repairs), new Action<Repair>(this.detach_Repairs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solution_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Solution_ID
		{
			get
			{
				return this._Solution_ID;
			}
			set
			{
				if ((this._Solution_ID != value))
				{
					this.OnSolution_IDChanging(value);
					this.SendPropertyChanging();
					this._Solution_ID = value;
					this.SendPropertyChanged("Solution_ID");
					this.OnSolution_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Solution", Storage="_Solution1", DbType="VarChar(60)")]
		public string Solution1
		{
			get
			{
				return this._Solution1;
			}
			set
			{
				if ((this._Solution1 != value))
				{
					this.OnSolution1Changing(value);
					this.SendPropertyChanging();
					this._Solution1 = value;
					this.SendPropertyChanged("Solution1");
					this.OnSolution1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Solution_Repair", Storage="_Repairs", ThisKey="Solution_ID", OtherKey="Solution_ID")]
		public EntitySet<Repair> Repairs
		{
			get
			{
				return this._Repairs;
			}
			set
			{
				this._Repairs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Repairs(Repair entity)
		{
			this.SendPropertyChanging();
			entity.Solution = this;
		}
		
		private void detach_Repairs(Repair entity)
		{
			this.SendPropertyChanging();
			entity.Solution = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Status_ID;
		
		private string _Description;
		
		private EntitySet<Claim> _Claims;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatus_IDChanging(int value);
    partial void OnStatus_IDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Status()
		{
			this._Claims = new EntitySet<Claim>(new Action<Claim>(this.attach_Claims), new Action<Claim>(this.detach_Claims));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Status_ID
		{
			get
			{
				return this._Status_ID;
			}
			set
			{
				if ((this._Status_ID != value))
				{
					this.OnStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._Status_ID = value;
					this.SendPropertyChanged("Status_ID");
					this.OnStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Claim", Storage="_Claims", ThisKey="Status_ID", OtherKey="Status_ID")]
		public EntitySet<Claim> Claims
		{
			get
			{
				return this._Claims;
			}
			set
			{
				this._Claims.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Claims(Claim entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_Claims(Claim entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
	}
	
	public partial class sp7CarDetailsByVINResult
	{
		
		private string _Name;
		
		private string _RegNumber;
		
		private int _Mileage;
		
		public sp7CarDetailsByVINResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegNumber", DbType="VarChar(10)")]
		public string RegNumber
		{
			get
			{
				return this._RegNumber;
			}
			set
			{
				if ((this._RegNumber != value))
				{
					this._RegNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mileage", DbType="Int NOT NULL")]
		public int Mileage
		{
			get
			{
				return this._Mileage;
			}
			set
			{
				if ((this._Mileage != value))
				{
					this._Mileage = value;
				}
			}
		}
	}
	
	public partial class sp4ListOfClaimsByVINResult
	{
		
		private string _ClaimNumber;
		
		private string _ClaimType_ID;
		
		private string _VIN;
		
		private string _Registration_number;
		
		private string _Repair;
		
		private decimal _Claim_Value;
		
		private System.Nullable<System.DateTime> _Claim_Date;
		
		private string _Status;
		
		public sp4ListOfClaimsByVINResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimNumber", DbType="Char(8)")]
		public string ClaimNumber
		{
			get
			{
				return this._ClaimNumber;
			}
			set
			{
				if ((this._ClaimNumber != value))
				{
					this._ClaimNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType_ID", DbType="Char(4)")]
		public string ClaimType_ID
		{
			get
			{
				return this._ClaimType_ID;
			}
			set
			{
				if ((this._ClaimType_ID != value))
				{
					this._ClaimType_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIN", DbType="Char(17) NOT NULL", CanBeNull=false)]
		public string VIN
		{
			get
			{
				return this._VIN;
			}
			set
			{
				if ((this._VIN != value))
				{
					this._VIN = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Registration number]", Storage="_Registration_number", DbType="VarChar(10)")]
		public string Registration_number
		{
			get
			{
				return this._Registration_number;
			}
			set
			{
				if ((this._Registration_number != value))
				{
					this._Registration_number = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Repair", DbType="VarChar(60)")]
		public string Repair
		{
			get
			{
				return this._Repair;
			}
			set
			{
				if ((this._Repair != value))
				{
					this._Repair = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Claim Value]", Storage="_Claim_Value", DbType="Money NOT NULL")]
		public decimal Claim_Value
		{
			get
			{
				return this._Claim_Value;
			}
			set
			{
				if ((this._Claim_Value != value))
				{
					this._Claim_Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Claim Date]", Storage="_Claim_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Claim_Date
		{
			get
			{
				return this._Claim_Date;
			}
			set
			{
				if ((this._Claim_Date != value))
				{
					this._Claim_Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
	}
	
	public partial class sp9ClaimDetailsResult
	{
		
		private string _ClaimType_ID;
		
		private string _TypeDescription;
		
		private System.Nullable<System.DateTime> _ClaimDate;
		
		private System.Nullable<double> _TimeAllowed;
		
		private decimal _ClaimValue;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _PaymentDate;
		
		private string _ManuCode;
		
		private string _Comments;
		
		private System.Nullable<int> _RepairOrder;
		
		private System.Nullable<System.DateTime> _ReceptionDate;
		
		private System.DateTime _RepairDate;
		
		private double _TimeTaken;
		
		private System.Nullable<int> _InvoiceNumber;
		
		private int _Mileage;
		
		private string _RegNumber;
		
		private string _Name;
		
		private string _Fault;
		
		private string _Solution;
		
		private string _Group_ID;
		
		private string _GroupDescription;
		
		public sp9ClaimDetailsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType_ID", DbType="Char(4)")]
		public string ClaimType_ID
		{
			get
			{
				return this._ClaimType_ID;
			}
			set
			{
				if ((this._ClaimType_ID != value))
				{
					this._ClaimType_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeDescription", DbType="VarChar(70) NOT NULL", CanBeNull=false)]
		public string TypeDescription
		{
			get
			{
				return this._TypeDescription;
			}
			set
			{
				if ((this._TypeDescription != value))
				{
					this._TypeDescription = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimDate", DbType="Date")]
		public System.Nullable<System.DateTime> ClaimDate
		{
			get
			{
				return this._ClaimDate;
			}
			set
			{
				if ((this._ClaimDate != value))
				{
					this._ClaimDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeAllowed", DbType="Float")]
		public System.Nullable<double> TimeAllowed
		{
			get
			{
				return this._TimeAllowed;
			}
			set
			{
				if ((this._TimeAllowed != value))
				{
					this._TimeAllowed = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimValue", DbType="Money NOT NULL")]
		public decimal ClaimValue
		{
			get
			{
				return this._ClaimValue;
			}
			set
			{
				if ((this._ClaimValue != value))
				{
					this._ClaimValue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="Date")]
		public System.Nullable<System.DateTime> PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this._PaymentDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManuCode", DbType="Char(3)")]
		public string ManuCode
		{
			get
			{
				return this._ManuCode;
			}
			set
			{
				if ((this._ManuCode != value))
				{
					this._ManuCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(100)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepairOrder", DbType="Int")]
		public System.Nullable<int> RepairOrder
		{
			get
			{
				return this._RepairOrder;
			}
			set
			{
				if ((this._RepairOrder != value))
				{
					this._RepairOrder = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptionDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReceptionDate
		{
			get
			{
				return this._ReceptionDate;
			}
			set
			{
				if ((this._ReceptionDate != value))
				{
					this._ReceptionDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepairDate", DbType="Date NOT NULL")]
		public System.DateTime RepairDate
		{
			get
			{
				return this._RepairDate;
			}
			set
			{
				if ((this._RepairDate != value))
				{
					this._RepairDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeTaken", DbType="Float NOT NULL")]
		public double TimeTaken
		{
			get
			{
				return this._TimeTaken;
			}
			set
			{
				if ((this._TimeTaken != value))
				{
					this._TimeTaken = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNumber", DbType="Int")]
		public System.Nullable<int> InvoiceNumber
		{
			get
			{
				return this._InvoiceNumber;
			}
			set
			{
				if ((this._InvoiceNumber != value))
				{
					this._InvoiceNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mileage", DbType="Int NOT NULL")]
		public int Mileage
		{
			get
			{
				return this._Mileage;
			}
			set
			{
				if ((this._Mileage != value))
				{
					this._Mileage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegNumber", DbType="VarChar(10)")]
		public string RegNumber
		{
			get
			{
				return this._RegNumber;
			}
			set
			{
				if ((this._RegNumber != value))
				{
					this._RegNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fault", DbType="VarChar(60)")]
		public string Fault
		{
			get
			{
				return this._Fault;
			}
			set
			{
				if ((this._Fault != value))
				{
					this._Fault = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solution", DbType="VarChar(60)")]
		public string Solution
		{
			get
			{
				return this._Solution;
			}
			set
			{
				if ((this._Solution != value))
				{
					this._Solution = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Group_ID", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string Group_ID
		{
			get
			{
				return this._Group_ID;
			}
			set
			{
				if ((this._Group_ID != value))
				{
					this._Group_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupDescription", DbType="VarChar(60)")]
		public string GroupDescription
		{
			get
			{
				return this._GroupDescription;
			}
			set
			{
				if ((this._GroupDescription != value))
				{
					this._GroupDescription = value;
				}
			}
		}
	}
	
	public partial class sp5ListOfClaimsByRegResult
	{
		
		private string _ClaimNumber;
		
		private string _ClaimType_ID;
		
		private string _VIN;
		
		private string _Registration_number;
		
		private string _Repair;
		
		private decimal _Claim_Value;
		
		private System.Nullable<System.DateTime> _Claim_Date;
		
		private string _Status;
		
		public sp5ListOfClaimsByRegResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimNumber", DbType="Char(8) NOT NULL", CanBeNull=false)]
		public string ClaimNumber
		{
			get
			{
				return this._ClaimNumber;
			}
			set
			{
				if ((this._ClaimNumber != value))
				{
					this._ClaimNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType_ID", DbType="Char(4)")]
		public string ClaimType_ID
		{
			get
			{
				return this._ClaimType_ID;
			}
			set
			{
				if ((this._ClaimType_ID != value))
				{
					this._ClaimType_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIN", DbType="Char(17) NOT NULL", CanBeNull=false)]
		public string VIN
		{
			get
			{
				return this._VIN;
			}
			set
			{
				if ((this._VIN != value))
				{
					this._VIN = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Registration number]", Storage="_Registration_number", DbType="VarChar(12)")]
		public string Registration_number
		{
			get
			{
				return this._Registration_number;
			}
			set
			{
				if ((this._Registration_number != value))
				{
					this._Registration_number = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Repair", DbType="VarChar(60)")]
		public string Repair
		{
			get
			{
				return this._Repair;
			}
			set
			{
				if ((this._Repair != value))
				{
					this._Repair = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Claim Value]", Storage="_Claim_Value", DbType="Money NOT NULL")]
		public decimal Claim_Value
		{
			get
			{
				return this._Claim_Value;
			}
			set
			{
				if ((this._Claim_Value != value))
				{
					this._Claim_Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Claim Date]", Storage="_Claim_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Claim_Date
		{
			get
			{
				return this._Claim_Date;
			}
			set
			{
				if ((this._Claim_Date != value))
				{
					this._Claim_Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
	}
	
	public partial class sp8CarDetailsByRegResult
	{
		
		private string _Name;
		
		private string _VIN;
		
		private int _Mileage;
		
		public sp8CarDetailsByRegResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIN", DbType="Char(17) NOT NULL", CanBeNull=false)]
		public string VIN
		{
			get
			{
				return this._VIN;
			}
			set
			{
				if ((this._VIN != value))
				{
					this._VIN = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mileage", DbType="Int NOT NULL")]
		public int Mileage
		{
			get
			{
				return this._Mileage;
			}
			set
			{
				if ((this._Mileage != value))
				{
					this._Mileage = value;
				}
			}
		}
	}
	
	public partial class sp20FilterClaimsResult
	{
		
		private string _ClaimNumber;
		
		private string _ClaimType_ID;
		
		private string _VIN;
		
		private string _RegNumber;
		
		private string _Make;
		
		private int _Mileage;
		
		private string _Fault;
		
		private System.DateTime _RepairDate;
		
		private System.Nullable<System.DateTime> _ClaimDate;
		
		private decimal _ClaimValue;
		
		private string _Status;
		
		private double _TimeTaken;
		
		private System.Nullable<double> _TimeAllowed;
		
		private System.Nullable<int> _InvoiceNumber;
		
		public sp20FilterClaimsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimNumber", DbType="Char(8) NOT NULL", CanBeNull=false)]
		public string ClaimNumber
		{
			get
			{
				return this._ClaimNumber;
			}
			set
			{
				if ((this._ClaimNumber != value))
				{
					this._ClaimNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType_ID", DbType="Char(4)")]
		public string ClaimType_ID
		{
			get
			{
				return this._ClaimType_ID;
			}
			set
			{
				if ((this._ClaimType_ID != value))
				{
					this._ClaimType_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIN", DbType="Char(17) NOT NULL", CanBeNull=false)]
		public string VIN
		{
			get
			{
				return this._VIN;
			}
			set
			{
				if ((this._VIN != value))
				{
					this._VIN = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegNumber", DbType="VarChar(12)")]
		public string RegNumber
		{
			get
			{
				return this._RegNumber;
			}
			set
			{
				if ((this._RegNumber != value))
				{
					this._RegNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Make", DbType="VarChar(30)")]
		public string Make
		{
			get
			{
				return this._Make;
			}
			set
			{
				if ((this._Make != value))
				{
					this._Make = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mileage", DbType="Int NOT NULL")]
		public int Mileage
		{
			get
			{
				return this._Mileage;
			}
			set
			{
				if ((this._Mileage != value))
				{
					this._Mileage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fault", DbType="VarChar(60)")]
		public string Fault
		{
			get
			{
				return this._Fault;
			}
			set
			{
				if ((this._Fault != value))
				{
					this._Fault = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepairDate", DbType="Date NOT NULL")]
		public System.DateTime RepairDate
		{
			get
			{
				return this._RepairDate;
			}
			set
			{
				if ((this._RepairDate != value))
				{
					this._RepairDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimDate", DbType="Date")]
		public System.Nullable<System.DateTime> ClaimDate
		{
			get
			{
				return this._ClaimDate;
			}
			set
			{
				if ((this._ClaimDate != value))
				{
					this._ClaimDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimValue", DbType="Money NOT NULL")]
		public decimal ClaimValue
		{
			get
			{
				return this._ClaimValue;
			}
			set
			{
				if ((this._ClaimValue != value))
				{
					this._ClaimValue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeTaken", DbType="Float NOT NULL")]
		public double TimeTaken
		{
			get
			{
				return this._TimeTaken;
			}
			set
			{
				if ((this._TimeTaken != value))
				{
					this._TimeTaken = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeAllowed", DbType="Float")]
		public System.Nullable<double> TimeAllowed
		{
			get
			{
				return this._TimeAllowed;
			}
			set
			{
				if ((this._TimeAllowed != value))
				{
					this._TimeAllowed = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNumber", DbType="Int")]
		public System.Nullable<int> InvoiceNumber
		{
			get
			{
				return this._InvoiceNumber;
			}
			set
			{
				if ((this._InvoiceNumber != value))
				{
					this._InvoiceNumber = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
